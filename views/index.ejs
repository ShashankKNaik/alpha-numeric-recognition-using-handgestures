<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">

  <meta http-equiv="X-UA-Compatible" content="IE=edge">

  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">

  <script src="https://cdn.jsdelivr.net/npm/@mediapipe/camera_utils/camera_utils.js" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/@mediapipe/control_utils/control_utils.js" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/@mediapipe/drawing_utils/drawing_utils.js" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/@mediapipe/hands/hands.js" crossorigin="anonymous"></script>
  <link rel="stylesheet" href="css/style.css">

  <title>F pro</title>
</head>

<style>
/* canvas{
  width: 90vw;
} */
/* video{
  display: none;
} */
.data{
  display: none;
}

.container{
  position: relative;
}
canvas,video{
  position: absolute;
  top: 0;
  left: 0;
}
.region{
  position: absolute;
  border: 2px solid rgb(81, 255, 81);
  background-color: rgba(0, 0, 0, 0);
  width: 200px;
  height: 400px;
  top: 50px;
  left: 350px;
  box-sizing: border-box;
}
#output{
  padding: 20px;
  font-size: large;
  font-weight: bold;
}
</style>

<body>
    <div class="form">
        <div class="info">
            <h1><i>User Information</i></h1>
            <hr>
            <p><b>Name : </b><%= name %></p>
            <p><b>Email : </b><%= email %></p>
            <br>
            <a href="/logout">logout</a>
        </div>
    </div>
  <div class="container">
    <video class="input_video" height="480" width="640"></video><br>
    <canvas class="output_canvas" height="120" width="160"></canvas>
    <div class="region"></div>
    <!-- <button onclick="startCam()">end</button> -->
  </div>

  <div class="data-container">
    <div class="data" id="data"></div>
    <button onclick="sendData()">capture</button>
  </div>
  <div>
    <div id="output">

    </div>
  </div>
</body>

<script>
  $.ajaxSetup({async:false})
  function sendData(){
    data = $('#data').html()
    $.post('/home',{
                handArray:data
               },
               (data)=>{
                  if(data == 'error')
                    alert('error');
                  else{
                    console.log("res: "+data)
                    let val=$('#output').html()
                    $('#output').html(val+data)
                  }
                }
    )
  }
</script>

<script type="module">
Array.prototype.inArray = function (value)

// Returns true if the passed value is found in the
// array. Returns false if it is not.
{
    var i;
    for (i=0; i < this.length; i++) {
        // Matches identical (===), not just similar (==).
        if (this[i] === value) {
            return true;
        }
    }
    return false;
};

  const videoElement = document.getElementsByClassName('input_video')[0];
  const canvasElement = document.getElementsByClassName('output_canvas')[0];
  const canvasCtx = canvasElement.getContext('2d');
  
  function onResults(results) {
    canvasCtx.save();
    canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);
    canvasCtx.drawImage(
        results.image, 0, 0, canvasElement.width, canvasElement.height);

    if (results.multiHandLandmarks) {
      for (const landmarks of results.multiHandLandmarks) {
        
        drawConnectors(canvasCtx, landmarks, HAND_CONNECTIONS,
                       {color: '#00FF00', lineWidth: 1});
        drawLandmarks(canvasCtx, landmarks, {color: '#FF0000', lineWidth: 0.01});

        
        let lmList = []

        /////////////////
        // m=lmList.pop(9)

        let featureNotSelect=[1,5,13,17]
        var mx=landmarks[9].x * 480
        var my=landmarks[9].y * 640
        
        for(var i=0;i<21;i++){
          if(i==9 || featureNotSelect.inArray(i))
            continue;
          var cx=landmarks[i].x * 480
          var cy=landmarks[i].y * 640
          var v=1
          if(cx<mx)
            v=-1
          lmList.push(parseInt(Math.sqrt((cx-mx)*(cx-mx) + (cy-my)*(cy-my))) * v)
        }
         
        lmList=lmList.toString()
        console.log(lmList)
        $("#data").html(lmList)
        console.log("dddd")
      }
    }
    canvasCtx.restore();
  }
  
  const hands = new Hands({locateFile: (file) => {
    return `https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}`;
  }});
  hands.setOptions({
    maxNumHands: 1,
    modelComplexity: 1,
    minDetectionConfidence: 0.5,
    minTrackingConfidence: 0.5
  });
  hands.onResults(onResults);
  
  const camera = new Camera(videoElement, {
    onFrame: async () => {
      await hands.send({image: videoElement});
    },
    width:640,
    height: 480
  });

  camera.start();
  </script>

</html>