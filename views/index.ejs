<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <meta property="og:type" content="website"/>
    <meta property="og:title" content="H2T">
    <meta property="og:description" content="Convert static hand gesture to alphanumeric">
    <meta property="og:image" content="https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.kindpng.com%2Fimgv%2FoRomoh_raised-hands-png-transparent-hand-emoji-png-download%2F&psig=AOvVaw299KbkYcytUCbgm15_kRx7&ust=1652178340790000&source=images&cd=vfe&ved=0CAwQjRxqFwoTCMDK_7ma0vcCFQAAAAAdAAAAABAb">
    <meta property="og:url" content="">
    <meta property="og:image:secure_url" itemprop="image" content="https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.kindpng.com%2Fimgv%2FoRomoh_raised-hands-png-transparent-hand-emoji-png-download%2F&psig=AOvVaw299KbkYcytUCbgm15_kRx7&ust=1652178340790000&source=images&cd=vfe&ved=0CAwQjRxqFwoTCMDK_7ma0vcCFQAAAAAdAAAAABAb">
    <meta property="og:image:width" content="600">
    <meta property="og:image:height" content="600">
    <meta name="mobile-web-app-capable" content="yes">

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link href='https://fonts.googleapis.com/css?family=Arizonia' rel='stylesheet'>
    
    <script src="https://cdn.jsdelivr.net/npm/@mediapipe/camera_utils/camera_utils.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/@mediapipe/control_utils/control_utils.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/@mediapipe/drawing_utils/drawing_utils.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/@mediapipe/hands/hands.js" crossorigin="anonymous"></script>

    <link rel="shortcut icon" type="image/svg" href="./images/favicon.png">
    <link rel="stylesheet" href="css/style.css">

    <title>H2T - Convert hand gesture to alphanumeric</title>
</head>


<body>
    <div class="head">
        <h2 class="ml-3" onclick="theme()" style="font-family: 'Arizonia';font-weight: 1000;">H2T</h2>
        <button><a href="/logout">logout</a></button>
        <span>Hi..<%= name %></span>
    </div>

    <div class="container-fluid">
        <div class="row align-items-start">
          <div class="col-sm-7 left">
              <div class="video">
                <div class="cont">
                  <video class="input_video" height="480" width="640"></video><br>
                  <canvas class="output_canvas" height="120" width="160"></canvas>
                  <div class="region"></div>
                </div>
              </div>
              <div class="data" id="data"></div>
              <button class="capture" onclick="sendData()">capture</button>
              <button class="capture" onclick="cle()">clear</button>
              <button class="capture" onclick="del()">delete</button>
          </div>
          <div class="col-sm-5 right">
            <div class="output">
              <h3>Output :</h3>
              <p id="output">
              </p>
            </div>
          </div>
        </div>
    </div>

    <div class="footer">
        shashank Krishna Naik
    </div>
</body>

<script src="js/index.js">



</script>


<script>
  $.ajaxSetup({async:false})
  function sendData(){
    data = $('#data').html()
    $.post('/home',{
                handArray:data
               },
               (data)=>{
                  if(data == 'error')
                    alert('error');
                  else{
                    console.log("res: "+data)
                    let val=$('#output').html()
                    $('#output').html(val+data)
                  }
                }
    )
  }

  function cle(){
    $('#output').html("")
  }
  function del(){
    let val=$('#output').html()
    $('#output').html(val.slice(0,-1))
  }
</script>

<script type="module">
Array.prototype.inArray = function (value)

// Returns true if the passed value is found in the
// array. Returns false if it is not.
{
    var i;
    for (i=0; i < this.length; i++) {
        // Matches identical (===), not just similar (==).
        if (this[i] === value) {
            return true;
        }
    }
    return false;
};

  const videoElement = document.getElementsByClassName('input_video')[0];
  const canvasElement = document.getElementsByClassName('output_canvas')[0];
  const canvasCtx = canvasElement.getContext('2d');
  
  function onResults(results) {
    canvasCtx.save();
    canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);
    canvasCtx.drawImage(
        results.image, 0, 0, canvasElement.width, canvasElement.height);

    if (results.multiHandLandmarks) {
      for (const landmarks of results.multiHandLandmarks) {
        
        drawConnectors(canvasCtx, landmarks, HAND_CONNECTIONS,
                       {color: '#00FF00', lineWidth: 1});
        drawLandmarks(canvasCtx, landmarks, {color: '#FF0000', lineWidth: 0.01});

        
        let lmList = []

        /////////////////
        // m=lmList.pop(9)

        let featureNotSelect=[1,5,13,17]
        var mx=landmarks[9].x * 480
        var my=landmarks[9].y * 640
        
        for(var i=0;i<21;i++){
          if(i==9 || featureNotSelect.inArray(i))
            continue;
          var cx=landmarks[i].x * 480
          var cy=landmarks[i].y * 640
          var v=1
          if(cx<mx)
            v=-1
          lmList.push(parseInt(Math.sqrt((cx-mx)*(cx-mx) + (cy-my)*(cy-my))) * v)
        }
         
        lmList=lmList.toString()
        console.log(lmList)
        $("#data").html(lmList)
        console.log("dddd")
      }
    }
    canvasCtx.restore();
  }
  
  const hands = new Hands({locateFile: (file) => {
    return `https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}`;
  }});
  hands.setOptions({
    maxNumHands: 1,
    modelComplexity: 1,
    minDetectionConfidence: 0.5,
    minTrackingConfidence: 0.5
  });
  hands.onResults(onResults);
  
  const camera = new Camera(videoElement, {
    onFrame: async () => {
      await hands.send({image: videoElement});
    },
    width:640,
    height: 480
  });

  camera.start();
  </script>

</html>